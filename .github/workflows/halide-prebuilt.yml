name: halide prebuilt
on: workflow_dispatch
jobs:
  build:
    name: halide [${{matrix.arch}}-${{matrix.os}}-${{matrix.version}}]
    runs-on: ${{matrix.runner}}
    strategy:
      fail-fast: false
      matrix:
        arch: [ x86_64 ]
        os: [ windows, macos, ubuntu-20.04, ubuntu-22.04 ]
        version: [ 12.0.1, 14.0.0 ]

        include:
          - os: windows
            runner: windows-2022
          - os: macos
            runner: macos-latest
          - os: ubuntu-20.04
            runner: ubuntu-20.04
          - os: ubuntu-22.04
            runner: ubuntu-22.04
  
    steps:
      - name: Configure Windows runner
        if: runner.os == 'Windows'
        run: |
          choco install ninja 7zip wget

      - name: Configure macOS runner
        if: runner.os == 'macOS'
        run: |
          brew install ninja
          echo "MACOSX_DEPLOYMENT_TARGET=10.12" >> $GITHUB_ENV

      - name: Configure Linux runner
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install git xz-utils ninja-build

      - name: Install clang+llvm
        shell: pwsh
        run: |
          $CLANG_LLVM_OS='${{matrix.os}}'.ToLower()
          $CLANG_LLVM_VERSION= if ('${{matrix.version}}' -eq '12.0.1') { '12.0.1' } else { '14.0.6' }
          $CLANG_LLVM_BASE_URL="https://github.com/awakecoding/llvm-prebuilt/releases/download/v2022.2.0"
          $CLANG_LLVM_NAME="clang+llvm-${CLANG_LLVM_VERSION}-x86_64-${CLANG_LLVM_OS}"
          wget -q "${CLANG_LLVM_BASE_URL}/${CLANG_LLVM_NAME}.tar.xz"
          if ($IsWindows) {
            $LLVM_PREFIX="C:/llvm"
            cmd.exe /c "7z.exe x ${CLANG_LLVM_NAME}.tar.xz -so | 7z x -si -ttar -o`"C:/temp`""
            mv "C:/temp/${CLANG_LLVM_NAME}" $LLVM_PREFIX
          } else {
            $LLVM_PREFIX="/opt/llvm"
            tar -xf "${CLANG_LLVM_NAME}.tar.xz" -C /tmp
            sudo mv "/tmp/${CLANG_LLVM_NAME}" $LLVM_PREFIX
          }
          $LLVM_BIN_PATH="$LLVM_PREFIX/bin"
          $LLVM_DIR="$LLVM_PREFIX/lib/cmake/llvm"
          echo "LLVM_DIR=$LLVM_DIR" >> $Env:GITHUB_ENV
          echo "PATH=$LLVM_BIN_PATH$([IO.Path]::PathSeparator)$Env:PATH" >> $Env:GITHUB_ENV

      - name: Clone Halide ${{matrix.version}}
        uses: actions/checkout@v3
        with:
          repository: halide/Halide
          ref: v${{matrix.version}}
          path: halide

      - name: Enable Windows environment
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - name: Configure Halide
        shell: pwsh
        run: |
          if ($IsWindows) {
            $Env:CC="clang-cl"
            $Env:CXX="clang-cl"
          }
          cmake -G Ninja -S halide -B halide-build `
            -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON `
            -DWITH_TESTS=OFF -DWITH_APPS=OFF -DWITH_TUTORIALS=OFF `
            -DWITH_DOCS=OFF -DWITH_UTILS=OFF -DWITH_PYTHON_BINDINGS=OFF `
            -DTARGET_WEBASSEMBLY=ON -DLLVM_DIR="$Env:LLVM_DIR" -Wno-dev `
            -DCMAKE_INSTALL_PREFIX="halide-install"

      - name: Build Halide
        run: cmake --build halide-build

      - name: Install Halide
        run: cmake --install halide-build

      - name: Package Halide
        if: runner.os != 'Windows'
        run: |
          PACKAGE_NAME="halide-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}"
          mv halide-install ./${PACKAGE_NAME}
          tar -cJf ${PACKAGE_NAME}.tar.xz ${PACKAGE_NAME}

      - name: Package Halide
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $PACKAGE_NAME="halide-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}"
          mv halide-install $PACKAGE_NAME
          cmd.exe /c "7z a -ttar -snl -so $PACKAGE_NAME.tar $PACKAGE_NAME | 7z a -si $PACKAGE_NAME.tar.xz"

      - name: Upload Halide package
        uses: actions/upload-artifact@v3
        with:
          name: halide-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}
          path: halide-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}.tar.xz
