name: LLVM prebuilt
on: workflow_dispatch
jobs:
  build:
    name: LLVM ${{matrix.version}} [${{matrix.arch}}-${{matrix.os}}]
    runs-on: ${{matrix.runner}}
    strategy:
      fail-fast: false
      matrix:
        arch: [ x86_64 ]
        os: [ windows, macos, linux ]
        version: [ 12 ]

        include:
          - version: 12
            branch: release/12.x

          - os: windows
            runner: windows-2019
          - os: macos
            runner: macos-10.15
          - os: linux
            runner: ubuntu-18.04

          - arch: x86_64
            os: windows
            msvc: amd64
    steps:
      - name: Configure Windows runner
        if: runner.os == 'Windows'
        run: |
          choco install ninja 7zip

      - name: Configure macOS runner
        if: runner.os == 'macOS'
        env:
          CMAKE_OSX_DEPLOYMENT_TARGET: "10.12"
        run: |
          brew install ninja

      - name: Configure Ubuntu runner
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install xz-utils libxml2-dev
          sudo apt install ninja-build ${{matrix.multilib}}

      - name: Clone project
        uses: actions/checkout@v2
        with:
          path: llvm-nightlies

      - name: Clone LLVM ${{matrix.version}}
        uses: actions/checkout@v2
        with:
          repository: llvm/llvm-project
          ref: ${{matrix.branch}}
          path: llvm-project

      - name: Enable Developer Command Prompt
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{matrix.msvc}}

      - name: Configure LLVM
        run: "cmake -G Ninja
                    -DCMAKE_BUILD_TYPE=Release
                    \"-DCMAKE_TOOLCHAIN_FILE=${{matrix.CMAKE_TOOLCHAIN_FILE}}\"
                    \"-DLLVM_TARGETS_TO_BUILD=X86;ARM;NVPTX;AArch64;Mips;Hexagon;PowerPC;WebAssembly\"
                    \"-DLLVM_ENABLE_PROJECTS=clang;lld\"
                    -DLLVM_BUILD_32_BITS=OFF
                    -DLLVM_INCLUDE_EXAMPLES=OFF
                    -DLLVM_INCLUDE_TESTS=OFF
                    -DLLVM_INCLUDE_DOCS=OFF
                    -DLLVM_ENABLE_ASSERTIONS=ON
                    -DLLVM_ENABLE_RTTI=ON
                    -DLLVM_ENABLE_EH=ON
                    -DLLVM_ENABLE_LIBXML2=ON
                    -DLLVM_ENABLE_TERMINFO=OFF
                    -S llvm-project/llvm -B llvm-build"

      - name: Build LLVM
        run: cmake --build llvm-build

      - name: Install LLVM
        run: cmake --install llvm-build --prefix llvm-install --strip

      - name: Package LLVM
        if: runner.os != 'Windows'
        run: |
          mv llvm-install clang+llvm-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}
          tar -cJf clang+llvm-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}.tar.xz clang+llvm-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}

      - name: Package LLVM
        if: runner.os == 'Windows'
        run: |
          ren llvm-install clang+llvm-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}
          cmd.exe /c "7z a -ttar -snl -so clang+llvm-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}.tar clang+llvm-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}} | 7z a -si clang+llvm-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}.tar.xz"

      - name: Upload LLVM package
        uses: actions/upload-artifact@v2
        with:
          name: clang+llvm-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}
          path: clang+llvm-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}.tar.xz
